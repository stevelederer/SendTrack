//
//  MessagesViewController.swift
//  SendTrack-Message-Extension
//
//  Created by Steve Lederer on 2/17/19.
//  Copyright Â© 2019 Steve Lederer. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
        presentCollectionView(forConversation: conversation, with: self.presentationStyle)
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
        guard let conversation = activeConversation else { fatalError("Expected an active converstation") }
        
        presentCollectionView(forConversation: conversation, with: presentationStyle)

    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
    
    func presentCollectionView(forConversation: MSConversation, with presentationStyle: MSMessagesAppPresentationStyle) {
        let viewController: UIViewController
        
        if presentationStyle == .compact{
            guard let vc = self.storyboard?.instantiateViewController(withIdentifier: "TopSongMessagesCollectionViewController") as? TopSongMessagesCollectionViewController else { fatalError("expected view controller") }
            viewController = vc
        }
        else{
            guard let vc = self.storyboard?.instantiateViewController(withIdentifier: "TopSongMessagesCollectionViewController") as? TopSongMessagesCollectionViewController else { fatalError("expected view controller") }

            viewController = vc
        }
        
        for child in children {
            child.willMove(toParent: nil)
            child.view.removeFromSuperview()
            child.removeFromParent()
        }
        
        addChild(viewController)
        
        viewController.view.frame = view.bounds
        viewController.view.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(viewController.view)
        
//        viewController.view.leftAnchor.constraint(equalTo: view.leftAnchor).isActive = true
//        viewController.view.rightAnchor.constraint(equalTo: view.rightAnchor).isActive = true
//        viewController.view.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
//        viewController.view.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
//
        viewController.didMove(toParent: self)
    }

}
